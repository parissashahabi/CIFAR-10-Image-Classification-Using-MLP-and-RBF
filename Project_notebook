{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d30e5368",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# torch is just for the feature extractor and the dataset (NOT FOR IMPLEMENTING NEURAL NETWORKS!)\n",
    "import torch\n",
    "from torchvision import datasets\n",
    "import torchvision.transforms as transforms\n",
    "from torchvision.models import resnet34\n",
    "# sklearn is just for evaluation (NOT FOR IMPLEMENTING NEURAL NETWORKS!)\n",
    "from sklearn.metrics import confusion_matrix, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "017f587f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert data to a normalized torch.FloatTensor\n",
    "transform = transforms.Compose([\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
    "    ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9580db19",
   "metadata": {},
   "outputs": [],
   "source": [
    "# choose the training and test datasets\n",
    "train_data = datasets.CIFAR10('data', train=True,\n",
    "                              download=True, transform=transform)\n",
    "test_data = datasets.CIFAR10('data', train=False,\n",
    "                             download=True, transform=transform)\n",
    "# You should define x_train and y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a09947",
   "metadata": {},
   "source": [
    "### Dense (fully connected) layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3ef2947",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Dense:\n",
    "    def __init__(self,n_inputs,n_neurons):\n",
    "        # // To do: Define initial weight and bias\n",
    "    \n",
    "    def forward(self,inputs):\n",
    "        # // To do: Define input and output\n",
    "\n",
    "    def backward(self,b_input):\n",
    "        # // To do: Weight and bias gradients"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8de1c92a",
   "metadata": {},
   "source": [
    "### Activation functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7116c715",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ReLU:\n",
    "    def forward(self,inputs):\n",
    "        # // To do: Implement the ReLU formula\n",
    "\n",
    "    def backward(self,b_input):\n",
    "        # // To do: Implement the ReLU derivative with respect to the input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "393a2d31",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Sigmoid:\n",
    "    def forward(self,inputs):\n",
    "        # // To do: Implement the sigmoid formula\n",
    "\n",
    "    def backward(self,b_input):\n",
    "        # // To do: Implement the sigmoid derivative with respect to the input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4ea7b84",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Softmax:\n",
    "    def forward(self,inputs):\n",
    "        # // To do: Implement the softmax formula\n",
    "\n",
    "    \n",
    "    def backward(self,b_input):\n",
    "        # // To do: Implement the softmax derivative with respect to the input"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a78183ba",
   "metadata": {},
   "source": [
    "### Loss function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e21c202",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Categorical_Cross_Entropy_loss:\n",
    "    def forward(self,softmax_output,class_label):\n",
    "        # // To do: Implement the CCE loss formula\n",
    "\n",
    "    def backward(self,softmax_output,class_label):\n",
    "        # // To do: Implement the CCE loss derivative with respect to predicted label"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b6170d6",
   "metadata": {},
   "source": [
    "### Optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af57ccac",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SGD:\n",
    "    def __init__(self,learning_rate = 0.001):\n",
    "        self.learning_rate = learning_rate\n",
    "        \n",
    "    def update(self,layer):\n",
    "        # // To do: Update layer params based on gradient descent rule"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ea3ce45",
   "metadata": {},
   "source": [
    "### Architecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e940679d",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_extractor = resnet34(pretrained=True)\n",
    "Layer1 = Dense(d,20) # d is the output dimension of feature extractor\n",
    "Act1 = ReLU()\n",
    "Layer2 = Dense(20,10)\n",
    "Act2 = Softmax()\n",
    "Loss = Categorical_Cross_Entropy_loss()\n",
    "Optimizer = SGD(learning_rate=0.001)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb4b9a7e",
   "metadata": {},
   "source": [
    "### Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21e1afab",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Main Loop of Training\n",
    "for epoch in range(20):\n",
    "    #forward\n",
    "    Layer1.forward(x_train)\n",
    "    Act1.forward(Layer1.output)\n",
    "    Layer2.forward(Act1.output)\n",
    "    Act2.forward(Layer2.output)\n",
    "    loss = Loss.forward(Act2.output,y_1hot)\n",
    "    \n",
    "    # Report\n",
    "    y_predict = np.argmax(Act2.output,axis = 1)\n",
    "    accuracy = np.mean(y_train == y_predict)\n",
    "    print(f'Epoch:{epoch}')\n",
    "    print(f'Loss: {loss}')\n",
    "    print(f'Accuracy: {accuracy}')\n",
    "    print('--------------------------')\n",
    "    \n",
    "    #backward\n",
    "    Loss.backward(Act2.output,y_1hot)\n",
    "    Act2.backward(Loss.b_output)\n",
    "    Layer2.backward(Act2.b_output)\n",
    "    Act1.backward(Layer2.b_output)\n",
    "    Layer1.backward(Act1.b_output)\n",
    "    \n",
    "    #update params\n",
    "    Optimizer.update(Layer1)\n",
    "    Optimizer.update(Layer2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5892666",
   "metadata": {},
   "source": [
    "### Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7e0237a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Confusion Matrix for the training set\n",
    "cm_train = confusion_matrix(y_train, y_predict)\n",
    "plt.subplots(figsize=(10, 6))\n",
    "sb.heatmap(cm_train, annot = True, fmt = 'g')\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"Actual\")\n",
    "plt.title(\"Confusion Matrix for the training set\")\n",
    "plt.show()\n",
    "\n",
    "#Confusion Matrix for the test set\n",
    "# // To Do"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
